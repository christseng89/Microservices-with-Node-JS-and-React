02-13. Project Setup
md blog
cd blog
npx create-react-app client

md backends
cd backends

call setup posts
call setup comments

// To be continuous ...
md event-bus
md moderation
md query

02-14. Posts Service Creation
npm start
// nodemon index.js
// localhost:4000

02-16. Implementing a Comments Service
npm start 
// localhost:4001

  CommentsById {
    '2a6659a8': [ { id: 'c6498e37', content: 'Comment #a/2a6659a8/Title #1' } ],
    '6572a599': [ { id: '64e656a7', content: 'Comment #a/6572a599/Title #2' } ]
  }

02-20. React Project Setup
cd blog\client
npm i axios
// Go to C:\Users\{YourUsername}\AppData\Local folder and delete npm and npm-cache folders

npm start
http://localhost:3000/

02-21. Building Post Submission
// public\index.html w bootstrap
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>

// index.js => React 18
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// App.js
  return (
    <div className="container">
      <h1>Create Post</h1>
      <PostCreate />
    </div>
  );

// PostCreate.js (new)

02-22. Handling CORS Errors
npm i cors
npm start

// index.js
...
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

02-23. Fetching and Rendering Posts
// App.js
import PostCreate from "./PostCreate";
import PostList from "./PostList";

const App = () => {
  return (
    <div className="container">
      <h1>Create Post</h1>
      <PostCreate />
      <hr />
      <h1>Posts</h1>
      <PostList />
    </div>
  );
};

// PostList.js (new)

02-24. Creating Comments
// CreateComment.js (new)
// PostList.js
  <div className="card-body">
    <h3>{post.title}</h3>
    <CommentCreate postId={post.id} /> //***
  </div>

02-25. Displaying Comments
// CommentsList.js (new)  
// PostList.js
  <div className="card-body">
    <h3>{post.title}</h3>
    <CommentList postId={post.id} />
    <CommentCreate postId={post.id} />
  </div>

// Chrome => F12 => Network => XHR (concerns)
posts
comments 
...

02-32. A Basic Event Bus Implementation
cd backends 
md event-bus
cd event-bus
npm init -y
npm i express axios nodemon
// index.js (new)

02-33. Emitting Events
// Posts => index.js
const axios = require('axios');
...
app.post('/posts', async (req, res) => {
  const id = randomBytes(4).toString('hex');
  ...
  await axios.post('http://localhost:4005/events', {
    type: 'PostCreated',
    data: {
      id,
      title
    } 
  });

  res.status(201).send(posts[id]);
});

02-34. Emitting Comment Creation Events
// Comments => index.js
const axios = require('axios');
...
  await axios.post('http://localhost:4005/events', {
    type: 'CommentCreated',
    data: {
      id: commentId,
      content,
      postId: req.params.id
    }
  });
...

02-35. Receiving Events
// Posts && Comments => index.js
app.post("/events", (req, res) => {
  console.log("Post Event Received", req.body.type);
  res.send({});
});

02-36. Creating the Data Query Service
md query
cd query
npm init -y
npm i express cors
npm start

// index.js (new)

02-37. Parsing Incoming Events
// Query - index.js
const posts = {};

app.get('/posts', (req, res) => {
  res.send(posts);
});

app.post('/events', (req, res) => {
  // console.log("Event Received", req.body.type);
  const { type, data } = req.body;

  if (type === 'PostCreated') {
    const { id, title } = data;
    posts[id] = { id, title, comments: [], type };
  }

  if (type === 'CommentCreated') {
    const { id, content, postId } = data;
    const post = posts[postId];
    if (post !== undefined) {
      post.comments.push({ id, content, type });
      // console.log(posts);
    } else {
      console.log('Invalid Post, need further development here...')
      // get Post here ...
    }  
  }

  res.send({});
});

02-38. Using the Query Service (Client)
npx create-react-app client-async
cd client-async
xcopy ..\client/*.* /s
npm i axios
npm i react-scripts@5.0.1 --force
// public\index.html w bootstrap
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>

npm start 

// PostList.js
  const fetchPosts = async () => {
    const res = await axios.get("http://localhost:4002/posts");
    setPosts(res.data);
  };

  <div className="card-body">
    <h3>{post.title}</h3>
    <CommentList comments={post.comments} />
    <CommentCreate postId={post.id} />
  </div>

// CommentList.js
const CommentList = ({ comments }) => {
  const renderedComments = comments.map((comment) => {
    return <li key={comment.id}>{comment.content}</li>;
  });

  return <ul>{renderedComments}</ul>;
};

export default CommentList;

02-43. Creating the Moderation Service
md moderation
cd moderation
npm init -y
// package.json => "start": "nodemon index.js"
npm i express axios
npm start

02-44. Adding Comment Moderation
// Event-bus - index.js
// Moderate service
axios.post("http://localhost:4003/events", event).catch((err) => {
  console.log(err.message);
});

// Comments - index.js
comments.push({ id: commentId, content, status: 'pending' }); //***
commentsByPostId[req.params.id] = comments;

await axios.post('http://localhost:4005/events', {
  type: 'CommentCreated',
  data: {
    id: commentId,
    content,
    postId: req.params.id,
    status: 'pending' // ***
  }
});

// Query - index.js
if (type === 'CommentCreated') {
  const { id, content, status, postId } = data; //***
  const post = posts[postId];
  if (post !== undefined) {
    post.comments.push({ id, content, status, type }); //***
    // console.log(posts);
  } else {
...

02-47. Updating Comment Content
// Moderate - index.js
app.post('/events', async(req, res) => {
  const { type, data } = req.body;

  if (type === 'CommentCreated') {
    const status = data.content.includes('orange') ? 'rejected' : 'approved';

    await axios.post('http://localhost:4005/events', {
      type: 'CommentModerated',
      data: {
        id: data.id,
        postId: data.postId,
        status,
        content: data.content
      }
    });
  }
...

02-49. Rendering Comments by Status
// Comments - index.js
app.post("/events", async (req, res) => {
  const { type, data } = req.body;

  if (type === "CommentModerated") {
    const { postId, id, status, content } = data;
    const comments = commentsByPostId[postId];
    const comment = comments.find((comment) => {
      return comment.id === id;
    });
    comment.status = status;
    comment.type = type;

    await axios.post("http://localhost:4005/events", {
      type: "CommentUpdated",
      data: {
        id,
        status,
        postId,
        content,
      },
    });
  }

// Moderate - index.js (refer to 02-47)
// Query - index.js

if (type === 'CommentUpdated') {
  const { id, content, postId, status } = data;
  const post = posts[postId];
  const comment = post.comments.find(comment => {
    return comment.id === id;
  });

  comment.status = status;
  comment.type = type;
  comment.content = content;
}
