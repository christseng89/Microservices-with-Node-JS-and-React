10-194. Index to App Refactor
// app.ts (new)
// index.js
import mongoose from 'mongoose';
import { app } from './app';

const start = async () => {
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
...

10-195. A Few Dependencies
cd ticketing\auth

// Dockerfile
...
COPY package.json .
RUN npm install --only=prod ***
COPY . .
...

10-196. Test Environment Setup
// package.json
  "scripts": {
    "start": "ts-node-dev src/index.ts",
    "test": "jest --watchAll --no-cache" ***
  },
  "jest": { ***
    "preset": "ts-jest",
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "./src/test/setup.ts"
    ]
  },
  "keywords": [],

### Close VSC and Re-open VSC / solve issue typescript not recognizing beforeAll/Each afterAll

10-197. Our First Test
// test/setup.ts
beforeAll(async () => {
  process.env.JWT_KEY = 'abcdef'; ***
  mongo = await MongoMemoryServer.create(); ***
  const mongoUri = mongo.getUri(); ***
  
  await mongoose.connect(mongoUri, {});
});

// __test__/signup.test.ts (new)

cd ticketing\auth
npm run test

10-199. Testing Invalid Input & Unique email
// signup.test.ts

// setup.ts
afterAll(async () => {
  await mongoose.connection.close();
  await mongo.stop();
});

10-201. Changing Node Env During Tests
// app.ts
app.use(cookieSession({
  signed: false,
  secure: process.env.NODE_ENV !== 'test' ***
}));

// signup.test.ts
it('sets a cookie after successful signup', async () => {
  ...

it('delete cookie after unsuccessful signup', async () => {
  ...

10-202. Tests Around Sign In Functionality
// signin.test.ts (new)

10-203. Testing Sign Out
// signout.test.ts (new)

// signout.ts
router.post('/api/users/signout', async (req, res) => {
  // 1. Check if there is a JWT in the session object
  if (!req.session?.jwt) {
    return res.status(200).send({ currentUser: null }); ***
  }

10-204. Issues with Cookies During Current User Testing & 205. Easy Auth Solution
// current-user.test.ts (new)
it('responds with details about the current user', async () => {
  const authRes = await request(app)
    .post('/api/users/signup')
    .send({
      email: 'test@test.com',
      password: 'password'
    })
    .expect(201);

  const cookie = authRes.get('Set-Cookie');  
  const response = await request(app)
    .get('/api/users/currentuser')
    .set('Cookie', cookie)
    .send()
    .expect(200);

  // console.log(response.body);
});

it('responds without Cookie', async () => {
  await request(app)
    .get('/api/users/currentuser')
    .send()
    .expect(401);

});

// Fix Bug (to get Cookie)
  signout.test.ts

// Return status 401 without Cookie
  signout.ts 
  current-user.ts
