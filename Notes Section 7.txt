07-00 Turn GKE env to minikube
// Scaffold.yaml
build:
  # Google Cloud Build
  # googleCloudBuild:
  #   projectId: ticketing-com-353405
  artifacts:
    - image: christseng89/auth
      # - image: us.gcr.io/ticketing-com-353405/auth
      context: auth 

// auth-depl.yaml
build:
  # Google Cloud Build
  # googleCloudBuild:
  #   projectId: ticketing-com-353405

// Open VirtualBox
minikube start
minikube ip
  192.168.59.100
minikube image list

// Edit Hosts
notepad c:\Windows\System32\Drivers\etc\hosts
	192.168.59.100  posts.com
  192.168.59.100  ticketing.com #***
# 35.224.200.114  ticketing.com #GKE (refer to Notes Section 6)

kubectl get po
  NAME                              READY   STATUS    RESTARTS      AGE
  auth-depl-8f65c6999-ggzbj         1/1     Running   1 (13h ago)   2d18h
  client-depl-74b965b546-vd8zw      1/1     Running   1 (13h ago)   3d11h
  comments-depl-88747d86-rm8db      1/1     Running   1 (13h ago)   3d11h
  event-bus-depl-dd87dfc6c-nncwm    1/1     Running   1 (13h ago)   3d11h
  moderation-depl-b5849bf96-7r72p   1/1     Running   1 (13h ago)   3d11h
  posts-depl-fd4d84f79-8bvbg        1/1     Running   1 (13h ago)   3d11h
  query-depl-669486fd94-qlz7l       1/1     Running   1 (13h ago)   3d11h

cd ticketing
skaffold dev
  Press Ctrl+C to exit
  Watching for changes...
  [auth]
  [auth] > auth@1.0.0 start
  [auth] > ts-node-dev src/index.ts
  [auth]
  [auth] [INFO] 06:07:05 ts-node-dev ver. 2.0.0 (using ts-node ver. 10.8.1, typescript ver. 4.7.3)
  [auth] Listening on port 3000!!!!!!!!

### Browser
http://ticketing.com/api/users/currentuser

07-130. Creating Route Handlers
http://ticketing.com/api/users/currentuser
// index.ts
// routes/current-user.ts

07-131. Other Auth Routes
// Postman
Current User
Signup
Signin
Signout

07-132. Adding Validation && 07-133. Handling Validation Errors
// express-validator
https://express-validator.github.io/docs/
https://express-validator.github.io/docs/#basic-guide

cd ticketing\auth
npm i express-validator

07-137. Solution for Error Handling
https://expressjs.com/en/guide/error-handling.html

// Call the 'next' function

app.get('/', (req, res, next) => {
  ...
});

// Middleware Error Handlers
app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).send('Something broke!')
})

07-138. Building an Error Handling Middleware
// Error Handler Middleware => middlewares/error-handler.ts

// index.ts
import { errorHandler } from "./middlewares/error-handler";

...
app.use(signoutRouter);

app.use(errorHandler);
