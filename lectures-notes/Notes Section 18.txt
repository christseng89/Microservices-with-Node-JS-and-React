18-382. Creating the Events (common)
// common\src\events
// subject.ts
...
  OrderCreated = 'order:created',
  OrderCancelled = 'order:cancelled',
}

// order-created-event.ts order-cancelled-event.ts (new)

// index.ts
export * from './events/order-created-event';
export * from './events/order-cancelled-event';

cd ticketing\common
npm run pub

cd ..
cd orders
npm i @chinasystems/common --force

18-383. Implementing the Publishers
// orders\src\events\order-created-event.ts order-cancelled-event.ts (new)

18-384. Publishing the Order Creation
// new.ts
...
import { natsWrapper } from '../nats-wrapper';
import { OrderCreatedPublisher } from './../events/publishers/order-created-publisher';
...
    // Publish an event saying that an order was created ***
    await new OrderCreatedPublisher(natsWrapper.client)
      .publish({
        id: order.id,
        userId: order.userId,
        status: order.status, 
        expiresAt: order.expiresAt.toISOString(),
        ticket: {
            id: ticket.id,
            price: ticket.price,
        }, 
      });    

    res.status(201).send(order);

18-385. Publishing Order Cancellation
// delete.ts
import { natsWrapper } from '../nats-wrapper';
import { OrderCancelledPublisher } from '../events/publishers/order-cancelled-publisher';
...
  async (req: Request, res: Response) => {
    const order = await Order.findById(req.params.id).populate('ticket'); ***
    ...
    await order.save();

    // Publish an event saying that an order was cancelled
    await new OrderCancelledPublisher(natsWrapper.client)
    .publish({
      id: order.id,
      ticket: {
          id: order.ticket.id,
      }, 
    });    

18-386. Testing Event Publishing
// __mocks__\nats-wrapper.ts (new)
// order-cancelled-publisher.ts, order-created-publisher.ts (update)
  readonly subject = Subjects.OrderCancelled;
  readonly subject = Subjects.OrderCreated;

// new.test.ts
...
import { natsWrapper } from '../../nats-wrapper';
...
it('publishes an order created event', async () => {
  const ticket = Ticket.build({
    title: 'concert',
    price: 20,
  });
  await ticket.save();

  await request(app)
    .post('/api/orders')
    .set('Cookie', global.fakeSignup())
    .send({
      ticketId: ticket.id,
    })
    .expect(201);

  expect(natsWrapper.client.publish).toHaveBeenCalled();
});

// delete.test.ts
...
import { natsWrapper } from '../../nats-wrapper';
...
it('publishes a order cancelled event', async () => {
  const ticket = Ticket.build({
    title: 'concert',
    price: 20,
  });
  await ticket.save();

  const user = global.fakeSignup();
  // make a request to create an order
  const { body: order } = await request(app)
    .post('/api/orders')
    .set('Cookie', user)
    .send({ ticketId: ticket.id })
    .expect(201);

  // make a request to cancel the order
  await request(app)
    .delete(`/api/orders/${order.id}`)
    .set('Cookie', user)
    .send()
    .expect(204);

  expect(natsWrapper.client.publish).toHaveBeenCalled();
});

npm run test
  console.log
    Event published to subject order:created, with data { ***
      id: '62d2a4bf32d801739a46d090',
      userId: '62d2a4bf32d801739a46d08d',
      status: 'created',
      expiresAt: '2022-07-16T12:00:03.609Z',
      ticket: { id: '62d2a4bf32d801739a46d08b', price: 20 }
    }

    at node_modules/@chinasystems/common/build/events/base-publisher.js:15:25

  console.log
    Event published to subject order:cancelled, with data { ***
      id: '62d2a4bf32d801739a46d090',
      ticket: { id: '62d2a4bf32d801739a46d08b' }
    }

    at node_modules/@chinasystems/common/build/events/base-publisher.js:15:25
