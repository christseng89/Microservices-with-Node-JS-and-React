09-173. Adding Session Support
https://github.com/expressjs/cookie-session#readme

cd ticketing\auth
npm i cookie-session @types/cookie-session

// index.ts
const app = express();
app.set('trust proxy', true); ***
app.use(json());
app.use(cookieSession({ ***
  signed: false,
  secure: true
}));

09-174. Generating a JWT
https://github.com/auth0/node-jsonwebtoken
npm i jsonwebtoken @types/jsonwebtoken

// signup.ts
    // 2. Hash password as part of the models/user.ts
    
    // 3. Save user to DB
    const user = User.build({ email, password });
    await user.save();

    // Generate JWT
    const userJwt = jwt.sign(
      {
        id: user.id,
        email: user.email
      },
      'secret' // secret key
    );

    // Store it on session object
    req.session = {
      jwt: userJwt
    };    

    // 4. Return token   

### Postman
https://ticketing.com/api/users/signup

// Looking for 'Cookies'

09-175. JWT Signing Keys
https://www.base64decode.org/
// Decode => {"jwt":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYjdlMjY3Nzg0ZTE4ZDdiZjMzZTgzNiIsImVtYWlsIjoidGVzdDhAdGVzdC5jb20iLCJpYXQiOjE2NTYyMTgyMTV9.Fyvnmcq6Lt0npWWsb_DrtvX-YppEAFFqm50tXUGK4M8"}7

https://jwt.io/
### VERIFY SIGNATURE => 'secret' in signup.ts
// Payload 
  {
    "id": "62b7e267784e18d7bf33e836",
    "email": "test8@test.com",
    "iat": 1656218215
  }

09-177. Creating and Accessing Secrets
https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-config-file/

echo secret | base64       
  c2VjcmV0IA0K

kubectl apply -f auth-secret.yaml
  secret/jwt-secret created

kubectl edit secret jwt-secret
  apiVersion: v1
  data:
    JWT_KEY: c2VjcmV0IA0K
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jwt":"c2VjcmV0IA0K"},"kind":"Secret","metadata":{"annotations":{},"name":"jwt-secret","namespace":"default"},"type":"Opaque"}
    creationTimestamp: "2022-06-26T08:21:38Z"
    name: jwt-secret
    namespace: default
    resourceVersion: "1257988"
    uid: cedab9e1-3830-4dc0-8e26-d0ee7ae55225
  type: Opaque

https://www.base64decode.org/

// auth-depl.yaml
...
spec:
  containers:
    - name: auth
      # Google Cloud Build
      image: christseng89/auth
      # image: us.gcr.io/ticketing-com-353405/auth
      env: #***
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_KEY

09-178. Accessing Env Variables in a Pod
// index.ts
const start = async () => {
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
  
  try {

// signup.ts
...
  // Generate JWT
  const userJwt = jwt.sign(
    {
      id: user.id,
      email: user.email
    },
    // 'secret' // secret key
    process.env.JWT_KEY! // secret key ***
  );
...

09-180. Formatting JSON Properties
// user.ts
const userSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true
  },
  password: {
    type: String,
    required: true
  }
}, ***
{
  toJSON: {
    transform(_doc, ret) {
      ret.id = ret._id;
      delete ret._id;
      delete ret.password;
      delete ret.__v;
    },
  },
});

### Postman - Signup
{
    "email": "test9@test.com",
    "id": "62b85f1990e24efad440e2e5"
}

// should be done in view instead of model...

09-181. The Signin Flow
// signin.ts
router.post('/api/users/signin', 
[
  body('email')
    .isEmail()
    .withMessage('Email must be valid'),
  body('password')
    .trim()
    .notEmpty()
    .withMessage('Password is required')
],
async (req: Request, res: Response) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
   throw new RequestValidationError(errors.array());
  }
  
  const { email, password } = req.body;

  // 1. Check user exist
  const existingUser = await User.findOne({ email });
  if (!existingUser) {
    console.log ('Invalid credentials');
    throw new Error ('Invalid credentials');
  }

  // 2. Compare password as part of the models/user.ts
  const result = await Password.compare(existingUser.password, password);
  if (!result) {
    console.log ('Invalid credentials');
    throw new Error ('Invalid credentials');
  }
  
  // 3. Generate JWT
  const user = User.build({ email, password });
  const userJwt = jwt.sign(
    {
      id: user.id,
      email: user.email
    },
    // 'secret' // secret key
    process.env.JWT_KEY! // secret key
  );

  // Store JWT on session object
  req.session = {
    jwt: userJwt
  };    

  // 4. Return token    
  res.status(201).send(user);  

});

09-182. Common Request Validation Middleware
// validation-request.ts (new)

// signup.ts & signin.ts
router.post('/api/users/signin', 
[
  body('email')
    .isEmail()
    .withMessage('Email must be valid'),
  body('password')
    .trim()
    .notEmpty()
    .withMessage('Password is required')
],
validateRequest, ***
async (req: Request, res: Response) => {
  const { email, password } = req.body;

09-186. Returning the Current User
// current-user.ts
async (req: Request, res: Response) => {
  // 1. Check if there is a JWT in the session object
  if (!req.session?.jwt) {
    return res.status(400).send({ currentUser: null });
  }

  // 2. Verify the JWT
  try {
    const payload = jwt.verify(req.session.jwt, process.env.JWT_KEY!);
    res.status(200).send({ currentUser: payload });
  } catch (err) {
    res.status(400).send({ currentUser: null });
  }
});
