17-350. Scaffolding the Orders Service
cd ticketing
md orders
cd orders
md src

### copy files/folder from ticketing\tickets to ticketing\orders
copy ..\tickets\.dockerignore
copy ..\tickets\Dockerfile
copy ..\tickets\package.json
copy ..\tickets\tsconfig.json

copy ..\tickets\src\index.ts src\index.ts
copy ..\tickets\src\app.ts src\app.ts
copy ..\tickets\src\nats-wrapper.ts src\nats-wrapper.ts

npm i

// Build image - orders
minikube image build -t christseng89/orders .
  Sending build context to Docker daemon  414.2kB
  Step 1/6 : FROM node:16-alpine
  16-alpine: Pulling from library/node
  2408cc74d12b: Already exists
  fdd104a55e88: Already exists
  58c2dfb7c32f: Already exists
  ...

minikube image push christseng89/orders  
minikube image ls | grep orders
  docker.io/christseng89/orders:latest

17-351. A Touch More Setup & 352. Ingress Routing Rules
// orders-depl.yaml, orders-mongo-depl.yaml (new)

// skaffold.yaml
  - image: christseng89/orders ***
    # - image: us.gcr.io/ticketing-com-353405/orders
    context: orders
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
    ...    

// ingress-srv.yaml
  - path: /api/orders/?(.*)
    pathType: Prefix
    backend:
      service:
        name: orders-srv
        port:
          number: 3000                  
  - path: /?(.*)
    pathType: Prefix
  ...

cd ticketing
skaffold dev
  ...
  [orders] Connected to NATS
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!
  [tickets] Connected to NATS
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!

17-353. Scaffolding a Few Route Handlers ~ 363. Defining the Ticket Model
// copy folders 'models' and 'routes' from tickets to orders
// delete update.ts and update.test.ts 
// Change Ticket => Order, Change ticket => order
// delete.ts and delete.test.ts (new)

// app.ts
...
import { createOrderRouter } from './routes/new';
import { showOrderRouter } from './routes/show';
import { indexOrderRouter } from './routes/index';
import { deleteOrderRouter } from './routes/delete';

const app = express();
...
app.use(currentUser);
app.use(createOrderRouter);
app.use(showOrderRouter);
app.use(indexOrderRouter);
app.use(deleteOrderRouter);
...

skaffold dev

// 358. Creating an Order Status Enum
// common\src\events\types\order-status.ts (new)
// common\src\index.ts
...
export * from './events/ticket-updated-event';

export * from './events/types/order-status';***

cd ticketing\common
npm run pub

cd ..
cd auth
npm i @chinasystems/common --force

cd ..
cd tickets
npm i @chinasystems/common --force

cd ..
cd orders
npm i @chinasystems/common --force

// 363. Defining the Ticket Model
models\ticket.ts (new)

// 359. Order Model Setup
models\order.ts (new)

17-364. Order Creation Logic ~ 366. Convenience Document Methods
// new.ts
# 364. Order Creation Logic
router.post(
  '/api/orders',
  requireAuth, 
  [
    body('ticketId') ***
      .not()
      .isEmpty()
      .custom((input: string) => mongoose.Types.ObjectId.isValid(input))
      .withMessage('TicketId is required'),
  ],
  validateRequest,  
  async (req: Request, res: Response) => {
    const { ticketId } = req.body;

    // Find the ticket the user is trying to order in the database
    const ticket = await Ticket.findById(ticketId); ***
    if (!ticket) {
      throw new NotFoundError();
    }

## 365. Finding Reserved Tickets
    // Make sure that this ticket is not reserved in the Order database
    const reservedOrder = await Order.findOne({
      ticket: ticket,
      status: {
        $in: [
          OrderStatus.Created,
          OrderStatus.AwaitingPayment,
          OrderStatus.Complete,
        ],
      },
    });
    if (reservedOrder) {
      throw new Error('Ticket is already reserved');
    }
    
# 366. Convenience Document Methods
// ticket.ts
export interface TicketDoc extends mongoose.Document {
  title: string;
  price: number;
  isReserved(): Promise<boolean>; ***
}
...
ticketSchema.methods.isReserved = async function() {
  // this === the ticket document that we just called 'isReserved' on
  const reservedOrder = await Order.findOne({
    ticket: this,
    status: {
      $in: [
        OrderStatus.Created,
        OrderStatus.AwaitingPayment,
        OrderStatus.Complete,
      ],
    },
  });

  return !!reservedOrder;
};
...
// orders.ts
import { OrderStatus } from '@chinasystems/common';
import { TicketDoc } from './ticket';

export { OrderStatus }; ***

// new.ts
    // Make sure that this ticket is not reserved in the Order database
    const isReserved = await ticket.isReserved();
    if (isReserved) {
      throw new Error('Ticket is already reserved');
    }
  
    // Calculate an expiration date for this order
    // Build the order and save it to the database
    // await order.save();    
    // Publish an event saying that an order was created

    res.status(201).send();
  }
);

17-367. Order Expiration Times
// new.ts
const EXPIRATION_WINDOW_SECONDS = 15 * 60; ***
const router = express.Router();
...
    // Calculate an expiration date for this order ***
    const expiration = new Date();
    expiration.setSeconds(expiration.getSeconds() + EXPIRATION_WINDOW_SECONDS);

    // Build the order and save it to the database ***
    const order = Order.build({
      userId: req.currentUser!.id,
      status: OrderStatus.Created,
      expiresAt: expiration,
      ticket,
    });
    await order.save(); 

    // Publish an event saying that an order was created
    // await new OrderCreatedPublisher(natsWrapper.client)
    //   .publish({
    //     id: order.id,
    //     title: order.title,
    //     price: order.price,
    //     ticketId: ticket.id,
    //   });    

    res.status(201).send(order);

17-371. Asserting Tickets Exist ~ 373. Testing the Success Case
// new.test.ts (new)

17-374. Fetching a User's Orders
// index.ts
// Index all active orders for the current user
router.get('/api/orders',
  requireAuth,  ***
  async (req: Request, res: Response) => {
    const orders = await Order.find({
      userId: req.currentUser!.id, ***
    }).populate('ticket');

    res.status(200).send(orders);
});

17-375. A Slightly Complicated Test
// index.test.ts (new)

17-376. Fetching Individual Orders
// show.ts
router.get(
  '/api/orders/:id',
  requireAuth, ***
  async (req: Request, res: Response) => {
    const order = await Order.findById(req.params.id) ***
      .populate('ticket');

    if (!order) {
      throw new NotFoundError();
    }
    if (order.userId !== req.currentUser!.id) { ***
      throw new NotAuthorizedError();
    }

    res.status(200).send(order);
});
