21-458. The Payments Service
### Orders Services => Order-created, Order-cancelled;
### Payments Services => Payment-created;
// ### Refunds Services => Refund-created;

21-460. Initial Setup
cd ticketing
md payments
md payments\src
md payments\src\__mocks__
md payments\src\test
md payments\src\models
md payments\src\routes
md payments\src\events

cd payments
copy ..\tickets\.dockerignore
copy ..\tickets\Dockerfile
copy ..\tickets\package.json
copy ..\tickets\tsconfig.json

copy ..\tickets\src\index.ts src\index.ts
copy ..\tickets\src\app.ts src\app.ts
copy ..\tickets\src\nats-wrapper.ts src\nats-wrapper.ts
copy ..\tickets\src\__mocks__\* src\__mocks__\*
copy ..\tickets\src\test\* src\test\*

// package.json
{
  "name": "payments", ***
  
npm i

// index.ts app.ts (remove unavailable imports)

// Build image - payments
minikube image build -t christseng89/payments .
minikube image push christseng89/payments  
minikube image ls | grep payments
  docker.io/christseng89/payments:latest

// skaffold.yaml
    - image: christseng89/payments ***
      # - image: us.gcr.io/ticketing-com-353405/payments
      context: payments
      docker:
        dockerfile: Dockerfile
      sync:

// k8s\payments-depl.yaml & payments-mongo-depl.yaml (new)

### Skaffold
  [expiration] Connected to NATS
  [payments] Connected to NATS
  [payments] Connected to MongoDb
  [payments] Listening on port 3000!!!!!!!!
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!
  [tickets] Connected to NATS
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!
  [orders] Connected to NATS
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!

21-462. Another Order Model!
// order.ts (new)

21-464. Replicating Orders ~ 465. Testing Order Creation
### Payments
// order.ts
orderSchema.statics.build = (attrs: OrderAttrs) => {
  return new Order({ ***
    ...attrs,
    _id: attrs.id,
  });
};

// order-created-listener.ts, queue-group-name, order-created-listener.test.ts (new)

npm run test

21-466. Marking an Order as Cancelled ~ 468. Starting the Listeners
// order-cancelled-listener.ts order-cancelled-listener.test.ts (new) 

// index.ts
...
import { OrderCreatedListener } from './events/listeners/order-created-listener';
import { OrderCancelledListener } from './events/listeners/order-cancelled-listener';
...
    // Start listening for orders events
    new OrderCreatedListener(natsWrapper.client).listen();
    new OrderCancelledListener(natsWrapper.client).listen();
...

### skaffold
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!
  [tickets] Connected to NATS
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!
  [orders] Connected to NATS
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!
  [payments] Connected to NATS
  [payments] Connected to MongoDb
  [payments] Listening on port 3000!!!!!!!!

### Postman
= New Ticket
= New Order
= Cancel Order

### skaffold
// New Order
  [payments] Message #1 received from subject order:created/payments-service, with data {
  [payments]   id: '62da247e5298fdf078ba4d08',
  [payments]   version: 0,
  [payments]   userId: '62d7d247a5ceeda643abfe84',
  [payments]   status: 'created',
  [payments]   expiresAt: '2022-07-22T04:30:58.683Z',
  [payments]   ticket: { id: '62da2478d0d54b85c1ae446a', price: 1.2 }
  [payments] }

// Cancel Order
  [payments] Message #1 received from subject order:cancelled/payments-service, with data {
  [payments]   id: '62da247e5298fdf078ba4d08',
  [payments]   version: 1,
  [payments]   ticket: { id: '62da2478d0d54b85c1ae446a' }
  [payments] }

21-469. Payments Flow with Stripe JS ~ 470. Implementing the Create Charge Handler
// refer to diagram
https://stripe.com/docs/js/initializing

// routes/new.ts (new, incomplete)

// app.ts
...
app.use(currentUser);
app.use(createChargeRouter); ***
...

// ingress-srv.yaml 
...
  - path: /api/payments/?(.*) ***
    pathType: Prefix
    backend:
      service:
        name: payments-srv
        port:
          number: 3000
  - path: /?(.*)

### Postman
= New Payment (with empty body {})

21-471. Validating Order Payment ~ 472. Testing Order Validation Before Payment
// app.ts
...
    validateRequest,
    async (req: Request, res: Response) => {
      const { token, orderId } = req.body;
      const order = await Order.findById(orderId);
  
      if (!order) {
        throw new NotFoundError();
      }
      if (order.userId !== req.currentUser!.id) {
        throw new NotAuthorizedError();
      }
      if (order.status === OrderStatus.Cancelled) {
        throw new BadRequestError('Cannot pay for an cancelled order');
      }
  
      res.send({ success: true });
    }
  );
} catch (err) {
...

// routes/__test__/new.test.ts (new, incomplete)

21-473. Testing Same-User Validation
// setup.ts (Tickets, Orders, and Payments)
...
declare global {
  var signup: () => Promise<string[]>; // cannot be used here...
  var fakeSignup: (id?: string) => string[]; ***
}
...
global.fakeSignup = (id?: string) => { ***
  // 1 Build a JWT payload.  { id, email }
  const payload = {
    id: id || new mongoose.Types.ObjectId().toHexString(), ***
    email: 'test@test.com',
  };

### Auth
npm i @chinasystems\common --force
// Using BadRequestError for signin.ts and signup.ts
// Add timeout to setup.ts

24-474. Stripe Setup
cd ticketing\payments
npm i stripe

https://dashboard.stripe.com/test/apikeys
  NAME              TOKEN         LAST USED       CREATED
  Publishable key   pk_test_xxx   Feb 9, 2020     Feb 9, 2020
  Secret key        sk_test_xxx   Feb 9, 2020     Feb 9, 2020

kubectl create secret generic stripe-secret --from-literal STRIPE_KEY=sk_test_xxx
  secret/stripe-secret created

// payments-depl.yaml
      key: JWT_KEY
    - name: STRIPE_KEY ***
    valueFrom:
    secretKeyRef:
      name: stripe-secret
      key: STRIPE_KEY

21-476. Creating a Charge with Stripe
https://stripe.com/docs/api
https://stripe.com/docs/api/charges
https://stripe.com/docs/api/charges/create

curl https://api.stripe.com/v1/charges \
  -u sk_test_xxx: \
  -H "Stripe-Version: 2020-08-27"

// Create a charge
curl https://api.stripe.com/v1/charges \
  -u sk_test_xxx: \
  -d amount=2000 \
  -d currency=usd \
  -d source=tok_visa \
  -d description="My First Test Charge (created for API docs at https://www.stripe.com/docs/api)"

https://stripe.com/docs/api/charges/create?lang=node
  const stripe = require('stripe')('sk_test_xxx');

  // `source` is obtained with Stripe.js; see https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token
  const charge = await stripe.charges.create({
    amount: 2000,
    currency: 'usd',
    source: 'tok_mastercard',
    description: 'My First Test Charge (created for API docs at https://www.stripe.com/docs/api)',
  });

### Payments
// stripe.ts (new)
// new.ts
...
import { Order } from '../models/order';
import { stripe } from '../stripe'; ***
...
    // Charge the customer ***
    const charge = await stripe.charges.create({
      currency: 'usd',
      amount: order.price * 100,
      source: token,
      description: 'Charge for order #' + order.id
    });
    
    res.send({ success: true });
  ... 

21-477. Manual Testing of Payments
### Postman
= New Ticket
= New Order
= New Payment
  {
      "orderId": "{{orderId}}",
      "token": "tok_visa"
  }

https://dashboard.stripe.com/test/payments

### Note: "tok_visa" is a test token for developer mode ONLY.

21-478. Automated Payment Testing
### Payments
// __mock__\stripe.ts
// test\setup.ts
jest.mock('../nats-wrapper');
jest.mock('../stripe'); ***

// new.test.ts
it('returns a 204 with valid inputs', async () => {
  const userId = new mongoose.Types.ObjectId().toHexString();
  const order = Order.build({
    id: new mongoose.Types.ObjectId().toHexString(),
    userId,
    version: 0,
    price: 20,
    status: OrderStatus.Created,
  });
  await order.save();

  await request(app)
    .post('/api/payments')
    .set('Cookie', global.fakeSignup(userId))
    .send({
      token: 'tok_visa',
      orderId: order.id,
    });
});

21-479. Mocked Stripe Client
// new.ts
    res.status(201).send({ success: true }); ***

// new.test.ts
import { Order } from '../../models/order';

import { stripe } from '../../stripe';   ***
...
  await request(app)
    .post('/api/payments')
    .set('Cookie', global.fakeSignup(userId))
    .send({
      token: 'tok_visa',
      orderId: order.id,
    })
    .expect(201); ***

    const chargeOptions = (stripe.charges.create as jest.Mock).mock.calls[0][0]; ***
    expect(chargeOptions.source).toEqual('tok_visa');
    expect(chargeOptions.amount).toEqual(20 * 100);
    expect(chargeOptions.currency).toEqual('usd');    
});  

21-480. A More Realistic Test Setup ~ 481. Realistic Test Implementation
// __mock__\stripe.ts => rename to stripe1.ts

// scripe.ts
import Stripe from 'stripe';
import { stripeKey } from './stripe-key'; ***

if (!process.env.STRIPE_KEY) { ***
  process.env.STRIPE_KEY = stripeKey;
}

export const stripe = new Stripe(process.env.STRIPE_KEY, { ***
  apiVersion: '2020-08-27',
});

// setup.ts
jest.mock('../nats-wrapper');
// jest.mock('../stripe'); ***

// new.test.ts
...
let stripeTestDescription = 'returns a 201 with valid inputs';
if (process.env.STRIPE_KEY) {
  stripeTestDescription = stripeTestDescription + ' REAL STRIPE TEST';
} else {
  stripeTestDescription = stripeTestDescription + ' MOCK STRIPE TEST';
}
...
it(stripeTestDescription, async () => {
  const userId = new mongoose.Types.ObjectId().toHexString();
  const price = Math.floor(Math.random() * 100000);
  const order = Order.build({
    id: new mongoose.Types.ObjectId().toHexString(),
    userId,
    version: 0,
    price,
    status: OrderStatus.Created,
  });
  await order.save();

  await request(app)
    .post('/api/payments')
    .set('Cookie', global.fakeSignup(userId))
    .send({
      token: 'tok_visa',
      orderId: order.id,
    })
    .expect(201);
   
  if (process.env.STRIPE_KEY) {
    // REAL STRIPE TEST
    const stripeCharges = await stripe.charges.list({ limit: 10, });
    const stripeCharge = stripeCharges['data'].find((charge) => {
      return charge.amount === price * 100;
    });
  
    expect(stripeCharge).toBeDefined();
    expect(stripeCharge!.currency).toEqual('usd');
    expect(stripeCharge!.amount).toEqual(price * 100);  
  } else  {
    // FAKE STRIPE TEST
    const chargeOptions = (stripe.charges.create as jest.Mock).mock.calls[0][0];
    expect(chargeOptions.source).toEqual('tok_visa');
    expect(chargeOptions.amount).toEqual(price * 100);
    expect(chargeOptions.currency).toEqual('usd');  
  }
});

npm run test

https://dashboard.stripe.com/test/payments?status[0]=successful

21-482. Tying an Order and Charge Together ~ 483. Testing Payment Creation
// models\payment.ts (new)

// new.ts
import { Order } from '../models/order';
import { Payment } from '../models/payment'; ***
import { stripe } from '../stripe';

    // Create a payment ***
    const payment = Payment.build({
      orderId,
      stripeId: charge.id,
    });
    await payment.save();    
    
    res.status(201).send({ success: true });

// new.test.ts
import request from 'supertest';
import Stripe from 'stripe'; ***
...
import { Order } from '../../models/order';
import { Payment } from '../../models/payment'; ***
...
  let returnCharge: Stripe.Charge | undefined; ***
  if (process.env.STRIPE_KEY) {
    ...
    returnCharge = stripeCharge; ***
    expect(stripeCharge).toBeDefined();
    ...  
  } else  {
    // FAKE STRIPE TEST
    const chargeOptions = (stripe.charges.create as jest.Mock).mock.calls[0][0];
    returnCharge = chargeOptions; ***
    expect(chargeOptions.source).toEqual('tok_visa');
    ...
  }

  // Check payment .... ***
  const payment = await Payment.findOne({
    orderId: order.id,
    stripeId: returnCharge!.id,
  });
  expect(payment).not.toBeNull();  
  expect(payment!.orderId).toEqual(order.id);
  expect(payment!.stripeId).toEqual(returnCharge!.id);
});
