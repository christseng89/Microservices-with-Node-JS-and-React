20-440. Initial Setup
cd ticketing
md expiration
md expiration\src
md expiration\src\__mocks__

cd expiration
copy ..\tickets\.dockerignore
copy ..\tickets\Dockerfile
copy ..\tickets\package.json
copy ..\tickets\tsconfig.json

copy ..\tickets\src\index.ts src\index.ts
copy ..\tickets\src\nats-wrapper.ts src\nats-wrapper.ts
copy ..\tickets\src\__mocks__\* src\__mocks__\*

// Revise package.json (with Nats ONLY ...)
  "dependencies": {
    "@chinasystems/common": "^1.0.14",
    "ts-node-dev": "^2.0.0",
    "typescript": "^4.7.3"
  },
  "devDependencies": {
    "@types/jest": "^28.1.3",
    "jest": "^28.1.1",
    "ts-jest": "^28.0.5"
  }

npm i
npm i bull @types/bull

// index.ts
import { natsWrapper } from './nats-wrapper';

  const start = async () => {
    if (!process.env.NATS_CLUSTER_ID) {
      throw new Error('NATS_CLUSTER_ID must be defined');
    }
    if (!process.env.NATS_CLIENT_ID) {
      throw new Error('NATS_CLIENT_ID must be defined');
    }   
    if (!process.env.NATS_URL) {
      throw new Error('NATS_URL must be defined');
    }  
    
    try {
      await natsWrapper.connect(
        process.env.NATS_CLUSTER_ID, 
        process.env.NATS_CLIENT_ID, 
        process.env.NATS_URL
      );
      // Graceful Shutdown
      const stan = natsWrapper.client;
      stan.on('close', () => {
        console.log('NATS connection closed');
        process.exit();
      });
      process.on('SIGINT', () => stan.close());
      process.on('SIGTERM', () => stan.close());
    
    } catch (err) {
      console.error(err);
    }

  };

  start();

20-442. A Touch of Kubernetes Setup
// Build image - expiration
minikube image build -t christseng89/expiration .
minikube image push christseng89/expiration  
minikube image ls | grep expiration
  docker.io/christseng89/expiration:latest

// minikube ssh + docker login
minikube ssh
docker login
docker push christseng89/expiration

// expiration-depl.yaml expiration-redis-depl.yaml (new)

skaffold dev

kubectl get po | grep expiration
  expiration-depl-7f9bf99755-kh955         1/1     Running   0          3m7s
  expiration-redis-depl-649f5dcb6f-wwkcn   1/1     Running   0          3m6s

20-443. File Sync Setup
// skaffold.yaml
...
  - image: christseng89/expiration ****
    # - image: us.gcr.io/ticketing-com-353405/expiration
    context: expiration
    docker:
      dockerfile: Dockerfile        
    sync:

20-444. Listener Creation
// queue-group-name.ts order-created-listener.ts (new)

20-446. Creating a Queue
https://www.npmjs.com/package/bull

// expiration-queue.ts (new)

20-447. Queueing a Job on Event Arrival
// index.ts
...
    process.on('SIGINT', () => stan.close());
    process.on('SIGTERM', () => stan.close());

    new OrderCreatedListener(natsWrapper.client).listen();***
  } catch (err) {
...    

// order-created-listener.ts
import { queueGroupName } from './queue-group-name';
import { expirationQueue } from '../../queues/expiration-queue'; ***

...
  async onMessage(data: OrderCreatedEvent['data'], msg: Message) {
    // Do something with the data
    console.log('Event data!', data);
    await expirationQueue.add({ orderId: data.id }); ***
    // Ack the message
    msg.ack();
  }
}

20-448. Testing Job Processing
### Postman
= Signup
= New Ticket
= New Order

### skaffold
  [expiration] Message #1 received from subject order:created/expiration-service, with data {
  [expiration]   id: '62d7d375c2dea3be95c63987',
  [expiration]   version: 0,
  [expiration]   userId: '62d7d247a5ceeda643abfe84',
  [expiration]   status: 'created',
  [expiration]   expiresAt: '2022-07-20T10:20:41.215Z',
  [expiration]   ticket: { id: '62d7d32bb79664c7024df89c', price: 14 }
  [expiration] }

20-449. Delaying Job Processing
// order-created-listener.ts
    await expirationQueue.add({ orderId: data.id }, { delay: 10000 }); ***

### Postman
= Create Ticket
= Create Order

### skaffold
  [expiration] Message #2 received from subject order:created/expiration-service, with data {
  [expiration]   id: '62d82278c2dea3be95c6398f',
  [expiration]   version: 0,
  [expiration]   userId: '62d7d247a5ceeda643abfe84',
  [expiration]   status: 'created',
  [expiration]   expiresAt: '2022-07-20T15:57:48.330Z',
  [expiration]   ticket: { id: '62d82273b79664c7024df8a0', price: 15 }
  [expiration] }
  [expiration] I want to publish an expiration:complete event for orderId 62d82278c2dea3be95c6398f

// order-created-listener.ts
 async onMessage(data: OrderCreatedEvent['data'], msg: Message) {
    const delay = new Date(data.expiresAt).getTime() - new Date().getTime(); ***
    console.log('Waiting this many milliseconds to process the job:', delay);

    // Do something with the data
    await expirationQueue.add(
      { orderId: data.id }, 
      // { delay: 10000 }
      { delay } ***
    ); 

### skaffold
  [expiration] [INFO] 15:47:11 ts-node-dev ver. 2.0.0 (using ts-node ver. 10.9.1, typescript ver. 4.7.4)
  [expiration] Connected to NATS
  [expiration] Message #3 received from subject order:created/expiration-service, with data {
  [expiration]   id: '62d823aec2dea3be95c63997',
  [expiration]   version: 0,
  [expiration]   userId: '62d7d247a5ceeda643abfe84',
  [expiration]   status: 'created',
  [expiration]   expiresAt: '2022-07-20T16:02:58.310Z',
  [expiration]   ticket: { id: '62d823aab79664c7024df8a4', price: 16 }
  [expiration] }
  [expiration] Waiting this many milliseconds to process the job: 899932 

  900 secs = 15 minutes

20-450. Defining the Expiration Complete Event
### Common
// subject.ts
  ExpirationComplete = 'expiration:complete', ***
}

// expiration-complete-event.ts (new)

// index.ts
export * from './events/expiration-complete-event';

cd ticketing\common
npm run pub

cd ../tickets
npm i @chinasystems/common --force

cd ../orders
npm i @chinasystems/common --force

cd ../expiration
npm i @chinasystems/common --force
