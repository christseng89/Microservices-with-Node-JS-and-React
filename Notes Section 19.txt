19-390. Blueprint for Listeners ~ 392. Simple onMessage Implementation
// events\listeners\ticket-created-listener.ts & queue-group-name.ts

19-393. ID Adjustment
// ticket.ts
...
interface TicketAttrs {
  id: string;
  title: string;
  price: number;
}
...
ticketSchema.statics.build = (attrs: TicketAttrs) => {
  return new Ticket({ ***
    _id: attrs.id, 
    title: attrs.title,
    price: attrs.price,
  });
};
...

// ticket-created-listener.ts
  async onMessage(data: TicketCreatedEvent['data'], msg: Message) {
    const { id, title, price } = data;

    const ticket = Ticket.build({
      id,
      title,
      price,
    });
    await ticket.save();

19-394. Ticket Updated Listener Implementation
// *.test.ts Tests for ID Adjustment
  const ticket = Ticket.build({
    id: new mongoose.Types.ObjectId().toHexString(),  ***
    title: 'concert',
    price: 20,
  });

// ticket-updated-listener.ts (new)

19-395. Initializing the Listeners
// index.ts
import { TicketCreatedListener } from './events/listeners/ticket-created-listener';
import { TicketUpdatedListener } from './events/listeners/ticket-updated-listener'; ***

const start = async () => {
  ...
  process.on('SIGTERM', () => stan.close());

  new TicketCreatedListener(stan).listen(); ***
  new TicketUpdatedListener(stan).listen();

skaffold dev
  [orders] Connected to NATS
  [orders] Message #1 received from subject ticket:created/orders-service, with data {
  [orders]   id: '62d1762ab78860b3f01e4251',
  [orders]   title: 'Ticket title #1',
  [orders]   price: 10,
  [orders]   userId: '62d176217dd5e98778a1f3fa'
  [orders] }
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!

19-396. A Quick Manual Test (Postman)
### Postman
= SignIn or SignUp
= Create Ticket
= Create Order
= Get Orders
= Get Order by Id
= Cancel Order (twice)
= Get Orders
= Update Ticket
= Get Orders
//
[
  {
      "userId": "62d373ed7dd5e98778a1f3fd",
      "status": "cancelled",
      "expiresAt": "2022-07-17T03:52:12.130Z",
      "ticket": {
          "title": "Ticket Title Update2 #4", ***
          "price": 12,
          "__v": 0,
          "id": "62d383e019e08a389a5a37ee"
      },
      "id": "62d383e8ad014a169baf5b28"
  },
  {
      "userId": "62d373ed7dd5e98778a1f3fd",
      "status": "created",
      "expiresAt": "2022-07-17T04:00:14.125Z",
      "ticket": {
          "title": "Ticket Title Update2 #4", ***
          "price": 12,
          "__v": 0,
          "id": "62d383e019e08a389a5a37ee"
      },
      "id": "62d385caad014a169baf5b3d"
  }
]

### Bugfix
// delete.ts
  async (req: Request, res: Response) => {
    if( !mongoose.Types.ObjectId.isValid(req.params.id) ) { ***
      throw new BadRequestError('Valid order ID required');
    }
    const order = await Order.findById(req.params.id).populate('ticket');
    ...
    if (order.status === OrderStatus.Cancelled) { ***
      throw new BadRequestError('Ticket is already cancelled');
    }  

// show.ts
  async (req: Request, res: Response) => {
    if( !mongoose.Types.ObjectId.isValid(req.params.id) ) { ***
      throw new BadRequestError('Valid order ID required');
    }  

19-399. Optimistic Concurrency Control
https://en.wikipedia.org/wiki/Optimistic_concurrency_control#:~:text=Optimistic%20concurrency%20control%20(OCC)%2C,without%20interfering%20with%20each%20other.
https://en.wikipedia.org/wiki/Relational_database#RDBMS

19-400. Mongoose Update-If-Current
https://www.npmjs.com/package/mongoose-update-if-current

cd ticketing\tickets
npm i mongoose-update-if-current

cd ..
cd orders
npm i mongoose-update-if-current

19-401. Implementing OCC with Mongoose ~ 403. Testing OCC
// models\ticket.ts
...
import { updateIfCurrentPlugin } from 'mongoose-update-if-current'; ***
...
// An interface that describes the properties
// that a Ticket Document has
interface TicketDoc extends mongoose.Document {
  title: string;
  price: number;
  userId: string;
  version: number; ***
}
...
ticketSchema.set('versionKey', 'version'); ***
ticketSchema.plugin(updateIfCurrentPlugin);
ticketSchema.pre('save', async function(done) {
  done();
});
...

// __test__\ticket.test.ts (new)

cd ticketing\tickets
npm run test

19-404. One More Test
// ticket.test.ts
it('increments the version number on multiple saves', async () => {
  const ticket = Ticket.build({
    title: 'concert',
    price: 20,
    userId: '123',
  });

  await ticket.save();
  expect(ticket.version).toEqual(0);
  await ticket.save();
  expect(ticket.version).toEqual(1);
  await ticket.save();
  expect(ticket.version).toEqual(2);
});

19-405. Who Updates Versions?
'Version' number incremental ONLY when the "Primary Service" responsible 
for a record publishes an event to describe a create/update/delete to a record.

19-406. Including Versions in Events
// ticketing\common\src\events
    readonly id: string;
    readonly version: number; ***
- order-cancelled-event.ts
- order-created-event.ts
- ticket-created-event.ts
- ticket-updated-event.ts

cd ticketing\common
npm run pub

cd ..\tickets
npm i @chinasystems/common --force

cd ..\orders
npm i @chinasystems/common --force
