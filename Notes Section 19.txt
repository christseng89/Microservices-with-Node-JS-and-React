19-390. Blueprint for Listeners ~ 392. Simple onMessage Implementation
// events\listeners\ticket-created-listener.ts & queue-group-name.ts

19-393. ID Adjustment
// ticket.ts
...
interface TicketAttrs {
  id: string;
  title: string;
  price: number;
}
...
ticketSchema.statics.build = (attrs: TicketAttrs) => {
  return new Ticket({ ***
    _id: attrs.id, 
    title: attrs.title,
    price: attrs.price,
  });
};
...

// ticket-created-listener.ts
  async onMessage(data: TicketCreatedEvent['data'], msg: Message) {
    const { id, title, price } = data;

    const ticket = Ticket.build({
      id,
      title,
      price,
    });
    await ticket.save();

19-394. Ticket Updated Listener Implementation
// *.test.ts Tests for ID Adjustment
  const ticket = Ticket.build({
    id: new mongoose.Types.ObjectId().toHexString(),  ***
    title: 'concert',
    price: 20,
  });

// ticket-updated-listener.ts (new)

19-395. Initializing the Listeners
// index.ts
import { TicketCreatedListener } from './events/listeners/ticket-created-listener';
import { TicketUpdatedListener } from './events/listeners/ticket-updated-listener'; ***

const start = async () => {
  ...
  process.on('SIGTERM', () => stan.close());

  new TicketCreatedListener(stan).listen(); ***
  new TicketUpdatedListener(stan).listen();

skaffold dev
  [orders] Connected to NATS
  [orders] Message #1 received from subject ticket:created/orders-service, with data {
  [orders]   id: '62d1762ab78860b3f01e4251',
  [orders]   title: 'Ticket title #1',
  [orders]   price: 10,
  [orders]   userId: '62d176217dd5e98778a1f3fa'
  [orders] }
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!
