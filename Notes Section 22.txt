22-492. Two Quick Fixes #1
### ENSURE SHOWS => skaffold dev
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!
  [tickets] Connected to NATS
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!
  [orders] Connected to NATS
  [orders] Connected to MongoDb
  [orders] Listening on port 3000!!!!!!!!
  [payments] Connected to NATS
  [payments] Connected to MongoDb
  [payments] Listening on port 3000!!!!!!!!

// 1 package.json
  "scripts": {
    "build": "next build", ***
    "dev": "next"
  },

npm run build
  Warning: You have opted-out of Automatic Static Optimization due to `getInitialProps` in `pages/_app`. This does not opt-out pages with `getStaticProps`
  Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization

// 2 Dockerfile
FROM node:16-alpine ***

// 3 next.config.js 
module.exports = {
  webpack: (config) => { ***
  ...

// 4 _app.js
  <div>
    <Header currentUser={currentUser} />
    <div className="container"> ***
      <Component {...pageProps} />
    </div>
  </div>

22-492. Two Quick Fixes #2
### Bugfixing Step #1
// 1 index.js
LandingPage.getInitialProps = async (req) => {
  return {};
};

// 2 _app.js
...
  <div>
    <Header currentUser={currentUser} />
    <Component currentUser={currentUser} {...pageProps} /> ***
  </div>
...

npm run build

### Bugfixing Step #2

// 1. _app.js
    if (req.Component.getInitialProps) {
      pageProps = await req.Component.getInitialProps(req.ctx, client, data.currentUser); ***
    }
...   

// 2 index.js
LandingPage.getInitialProps = async (_ctx, _client, _currentUser) => {***
  return {};
};

### Always access /api/auth/currentUser from the next backend (i.e. _app.js)

22-493. Scaffolding a Form
// tickets\new.js (new)

https://ticketing.com/tickets/new

22-494. Sanitizing Price Input
import { useState } from 'react';

const NewTicket = () => {
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState('');

  const onBlur = () => {
    const value = parseFloat(price);
    if (isNaN(value)) {
      return;
    }
    setPrice(value.toFixed(2));
  };
...
  <input
    value={title}
    onChange={(e) => setTitle(e.target.value)}
    className="form-control"
  />
...
  <input
    value={price}
    onBlur={onBlur}
    onChange={(e) => setPrice(e.target.value)}
    className="form-control"
  />          
...

22-495. Ticket Creation
// new.js
import useRequest from '../../hooks/use-request';

const NewTicket = () => {
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState('');
  const { doRequest, errors } = useRequest({ ***
    url: '/api/tickets',
    method: 'post',
    body: {
      title,
      price,
    },
    onSuccess: (ticket) => console.log(ticket),
  });

  const onSubmit = (event) => { ***
    event.preventDefault();

    doRequest();
  };
...
  return (
    <div>
      <h1>Create a Ticket</h1>
      <form onSubmit={onSubmit}> ***
        ...
        <br/>
        {errors} ***
        <button className="btn btn-primary">Submit</button>
      </form>
    </div>
  );

// use-request.js
export default ({ url, method, body, onSuccess }) => {
  const [errors, setErrors] = useState(null); ***

  const doRequest = async () => {
    try {
      setErrors(null); ***

### Common
// validate-request.ts
  if (!errors.isEmpty()) {
    // req.session = null; ***
    throw new RequestValidationError(errors.array());
  }

cd ticketing\common
cd ..\auth
npm i @chinasystems/common --force

cd ..\tickets
npm i @chinasystems/common --force

cd ..\orders
npm i @chinasystems/common --force

cd ..\payments
npm i @chinasystems/common --force

22-496. Listing All Tickets
// new.js
import Router from 'next/router'; ***
...
    onSuccess: (ticket) => { ***
      console.log(ticket);
      Router.push('/');
    },
...

// index.js
const LandingPage = ({ currentUser, tickets }) => { ***
  if (!tickets) {
    return currentUser ? 
      <h1>You are signed in.</h1> : 
      <h1>You are NOT signed in.</h1>;
  }

  const ticketList = tickets.map((ticket) => {
    return (
      <tr key={ticket.id}>
        <td>{ticket.title}</td>
        <td>{ticket.price}</td>
      </tr>
    );
  });

  return (
    <div>
      <h1>Tickets</h1>
      <table className="table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Price</th>
          </tr>
        </thead>
        <tbody>{ticketList}</tbody>
      </table>
    </div>
  );
};

LandingPage.getInitialProps = async (_context, client, _currentUser) => { ***
  const { data } = await client.get('/api/tickets');
  return { tickets: data };
};

22-497. Linking to Wildcard Routes
// [ticketId].js (new)

// index.js
import Link from 'next/link'; ***
...
  const ticketList = tickets.map((ticket) => {
    return (
        ...
        <td>{ticket.price}</td>
        <td> ***
          <Link href="/tickets/[ticketId]" as={`/tickets/${ticket.id}`}>
            <a>View</a>
          </Link>
        </td>        
..
          <tr>
            <th>Title</th>
            <th>Price</th>
            <th>Link</th> ***
          </tr>
...

22-498. Creating an Order
// [ticketId].js (rewrite)
