13-258. Ticketing Service Overview
// api/tickets      GET   get all tickets
// api/tickets/:id  GET   get ticket by id
// api/tickets      POST  create ticket         { title, price }
// api/tickets/:id  PUT   update ticket by id   { title, price }

13-259. Project Setup
cd ..
md tickets
cd tickets
// copy files/folder from ticketing\auth to ticketing\tickets
files => .dockerignore Dockerfile package.json tsconfig.json src\index.ts src\app.ts 
folder = > test\*.*

// auth => tickets
// modify non-existing errors if any (app.ts)
npm i --force

// use minikube image build to build images and 
   then minikube ssh / docker push images to docker hub first

13-261. Running the Ticket Service
// tickets-depl.yaml tickets-mongo-depl.yaml (new)
### Test
cd ticketing\k8s
kubectl apply -f auth-secret.yaml
kubectl apply -f tickets-depl.yaml 
kubectl apply -f tickets-mongo-depl.yaml

cd ..
skaffold dev

kubectl get po
  NAME                                 READY   STATUS    RESTARTS   AGE
  auth-depl-79d9d89565-4dcxd           1/1     Running   0          2m50s
  auth-mongo-depl-6cdd7d4bbc-h27lw     1/1     Running   0          2m50s
  client-depl-84d88b677-v89wf          1/1     Running   0          2m50s
  tickets-depl-54f8b47c4d-9zd77        1/1     Running   0          2m50s
  tickets-mongo-depl-6df97b9f5-czjnq   1/1     Running   0          2m50s

kubectl get svc | grep srv
  auth-mongo-srv      ClusterIP   10.96.2.66       <none>        27017/TCP   3m50s
  auth-srv            ClusterIP   10.110.43.40     <none>        3000/TCP    3m51s
  client-srv          ClusterIP   10.97.89.114     <none>        3000/TCP    3m50s
  tickets-mongo-srv   ClusterIP   10.101.203.214   <none>        27017/TCP   4m52s
  tickets-srv         ClusterIP   10.96.134.70     <none>        3000/TCP    6m13s

// skaffold.yaml
  ...
      dockerfile: Dockerfile
  - image: christseng89/tickets
    # - image: us.gcr.io/ticketing-com-353405/tickets
    context: tickets
    docker:
      dockerfile: Dockerfile
    sync:
  ...

skaffold dev
  ...
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!
  ...
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!

13-262. Mongo Connection URI
// tickets-depl.yaml
  env:
    - name: MONGO_URI ***
      value: 'mongodb://tickets-mongo-srv:27017/tickets'
    - name: JWT_KEY

// index.ts
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
  if (!process.env.MONGO_URI) { ***
    throw new Error('MONGO_URI must be defined');
  }
  
  try {
    await mongoose.connect(process.env.MONGO_URI, {}); ***

13-263. Quick Auth Update
// auth-depl.yaml
  env:
    - name: MONGO_URI
      value: 'mongodb://auth-mongo-srv:27017/auth'
    ...

// index.ts
  ...
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
  if (!process.env.MONGO_URI) {
    throw new Error('MONGO_URI must be defined');
  }
  
  try {
    await mongoose.connect(process.env.MONGO_URI, {});
  ...

13-264. Test-First Approach
// new.test.ts (new)
cd ticketing\tickets
npm run test

13-265. Create Ticket Router
// new.ts (new)
// app.ts
import { createTicketRouter } from './routes/new';

const app = express();
...
app.use(createTicketRouter);

app.all("*", async () => {
...

// new.test.ts
it('has a route handler listening to /api/tickets for post requests', async () => {
  const response = await request(app)
    .post('/api/tickets')
    .send({});

  expect(response.status).toEqual(201);
});

13-266. Adding Auth Protection
// app.ts
import { errorHandler, NotFoundError, currentUser } from '@chinasystems/common'; ***
...
app.use(cookieSession({
  signed: false,
  secure: process.env.NODE_ENV !== 'test'
}));

app.use(currentUser); ***
app.use(createTicketRouter);
...

// new.ts
import { requireAuth } from '@chinasystems/common'; ***

const router = express.Router();
router.post(
  '/api/tickets',
  requireAuth,  *** // middleware
  async (_req: Request, res: Response) => {
    res.status(201).send({});
  }
);

// new.test.ts
...

13-267. Faking Authentication During Tests
### Browser => Sign Up => Network => currentuser => Headers
// session=eyJqd3QiOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKcFpDSTZJall5WXpVeVlUQTJNekprWm1ObE5HVmlPRFl4WXpOa01pSXNJbVZ0WVdsc0lqb2lkR1Z6ZEVCMFpYTjBMbU52YlNJc0ltbGhkQ0k2TVRZMU56QTRPRFV4T0gwLm01amJFdG43Mlg0bFhqb1ZCQUJqRlItYl9teWQ4QUo5YXFtaEd3NTYxakkifQ==

// setup.ts
import jwt from 'jsonwebtoken'; ***

import { app } from '../app'; 

declare global {
  var signup: () => Promise<string[]>; // cannot be used here...
  var fakeSignup: () => string[]; ***
}

...
global.fakeSignup = () => { ***
  // 1 Build a JWT payload.  { id, email }
  const payload = {
    id: '1lk24j124l',
    email: 'test@test.com',
  };

  // 2 Create the JWT!
  const token = jwt.sign(payload, process.env.JWT_KEY!);

  // 3 Build session Object. { jwt: MY_JWT }
  const session = { jwt: token };

  // 4 Turn that session into JSON
  const sessionJSON = JSON.stringify(session);

  // 5 Take JSON and encode it as base64
  const base64 = Buffer.from(sessionJSON).toString('base64');

  // return a string thats the cookie with the encoded data
  return [`session=${base64}`];

};

// new.test.ts
it('returns a status 201 if the user is signed in', async () => {
  const cookie = await global.fakeSignup();
  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', cookie)
    .send({});
 
  expect(response.status).toEqual(201);
});

13-269. Testing Request Validation & 270. Validating Title and Price
// new.ts
import { body } from 'express-validator'; ***

import { requireAuth, validateRequest } from '@chinasystems/common'; ***

const router = express.Router();
router.post(
  '/api/tickets',
  requireAuth, 
  [ ***
    body('title').not().isEmpty().withMessage('Title is required'),
    body('price')
      .isFloat({ gt: 0 })
      .withMessage('Price must be greater than 0'),
  ],
  validateRequest,  
  async (_req: Request, res: Response) => {
    res.status(201).send({});
  }
);

// new.test.ts
...
it('returns a status 201 if the user is signed in', async () => {
  const cookie = await global.fakeSignup();
  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', cookie)
    .send({
      title: 'asldkjf',
      price: 10,
    });
 
  expect(response.status).toEqual(201);
});

it('returns an error if an invalid title is provided', async () => {
  await request(app)
    .post('/api/tickets')
    .set('Cookie', global.fakeSignup())
    .send({
      title: '',
      price: 10,
    })
    .expect(400);

  await request(app)
    .post('/api/tickets')
    .set('Cookie', global.fakeSignup())
    .send({
      price: 10,
    })
    .expect(400);
});

it('returns an error if an invalid price is provided', async () => {
  await request(app)
    .post('/api/tickets')
    .set('Cookie', global.fakeSignup())
    .send({
      title: 'asldkjf',
      price: -10,
    })
    .expect(400);

  await request(app)
    .post('/api/tickets')
    .set('Cookie', global.fakeSignup())
    .send({
      title: 'laskdfj',
    })
    .expect(400);
});
...

13-271. Reminder on Mongoose with TypeScript & 272. Defining the Ticket Model
// ticket.ts (Mongoosee model)
