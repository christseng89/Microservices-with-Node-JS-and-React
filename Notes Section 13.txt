13-258. Ticketing Service Overview
// api/tickets      GET   get all tickets
// api/tickets/:id  GET   get ticket by id
// api/tickets      POST  create ticket         { title, price }
// api/tickets/:id  PUT   update ticket by id   { title, price }

13-259. Project Setup
cd ticketing\auth
npm i @chinasystems/common
// app.ts
...
import 'express-async-errors';
import cookieSession from 'cookie-session';
import { errorHandler, NotFoundError } from '@chinasystems/common'; ***

import { currentUserRouter } from './routes/current-user';
...

cd ..
md tickets
cd tickets
// copy files from ticketing\auth to ticketing\tickets
npm i --force

minikube image build -t christseng89/tickets .
minikube ssh
docker login
docker push christseng89/tickets
exit

13-261. Running the Ticket Service
// tickets-depl.yaml tickets-mongo-depl.yaml (new)
### Test
cd ticketing\k8s
kubectl apply -f auth-secret.yaml
kubectl apply -f tickets-depl.yaml 
kubectl apply -f tickets-mongo-depl.yaml

cd ..
skaffold dev

kubectl get po
  NAME                                 READY   STATUS    RESTARTS   AGE
  auth-depl-79d9d89565-4dcxd           1/1     Running   0          2m50s
  auth-mongo-depl-6cdd7d4bbc-h27lw     1/1     Running   0          2m50s
  client-depl-84d88b677-v89wf          1/1     Running   0          2m50s
  tickets-depl-54f8b47c4d-9zd77        1/1     Running   0          2m50s
  tickets-mongo-depl-6df97b9f5-czjnq   1/1     Running   0          2m50s

kubectl get svc | grep srv
  auth-mongo-srv      ClusterIP   10.96.2.66       <none>        27017/TCP   3m50s
  auth-srv            ClusterIP   10.110.43.40     <none>        3000/TCP    3m51s
  client-srv          ClusterIP   10.97.89.114     <none>        3000/TCP    3m50s
  tickets-mongo-srv   ClusterIP   10.101.203.214   <none>        27017/TCP   4m52s
  tickets-srv         ClusterIP   10.96.134.70     <none>        3000/TCP    6m13s

// skaffold.yaml
  ...
      dockerfile: Dockerfile
  - image: christseng89/tickets
    # - image: us.gcr.io/ticketing-com-353405/tickets
    context: tickets
    docker:
      dockerfile: Dockerfile
    sync:
  ...

skaffold dev
  ...
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!
  ...
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!

13-262. Mongo Connection URI
// tickets-depl.yaml
  env:
    - name: MONGO_URI ***
      value: 'mongodb://tickets-mongo-srv:27017/tickets'
    - name: JWT_KEY

// index.ts
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
  if (!process.env.MONGO_URI) { ***
    throw new Error('MONGO_URI must be defined');
  }
  
  try {
    await mongoose.connect(process.env.MONGO_URI, {}); ***

13-263. Quick Auth Update
// auth-depl.yaml
  env:
    - name: MONGO_URI
      value: 'mongodb://auth-mongo-srv:27017/auth'
    ...

// index.ts
  ...
  if (!process.env.JWT_KEY) {
    throw new Error('JWT_KEY must be defined');
  }
  if (!process.env.MONGO_URI) {
    throw new Error('MONGO_URI must be defined');
  }
  
  try {
    await mongoose.connect(process.env.MONGO_URI, {});
  ...

13-264. Test-First Approach
// new.test.ts (new)
cd ticketing\tickets
npm run test

13-265. Create Ticket Router
// new.ts (new)
// app.ts
import { createTicketRouter } from './routes/new';

const app = express();
...
app.use(createTicketRouter);

app.all("*", async () => {
...

// new.test.ts
it('has a route handler listening to /api/tickets for post requests', async () => {
  const response = await request(app)
    .post('/api/tickets')
    .send({});

  expect(response.status).toEqual(201);
});
