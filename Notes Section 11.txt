11-212. Basics of Next JS
cd ticketing
md client
cd client
npm init -y
npm i react react-dom react-scripts next

// package.json
...
  "scripts": {
    "dev": "next"
  },
...
  
npm run dev

### Browser
http://localhost:3000/
http://localhost:3000/banana

11-213. Building a Next Image
cd ticketing\client
minikube image build -t christseng89/ticketing-client .

11-214. Running Next Client in Kubernetes
// client-depl.yaml (new)

// ingress-srv.yaml
  ...
  - path: /?(.*)
    pathType: Prefix
    backend:
      service:
        name: client-srv
        port:
          number: 3000

// skaffold.yaml
      context: auth
      docker:
        dockerfile: Dockerfile
    - image: christseng89/ticketing-client #***
      context: client
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: '**/*.js'
            dest: .
deploy:          
...

cd ticketing
skaffold dev

### Browser
http://ticketing.com/
http://ticketing.com/banana

kubectl get po
  NAME                               READY   STATUS    RESTARTS   AGE
  auth-depl-64ff664fdb-6t6xm         1/1     Running   0          4m14s
  auth-mongo-depl-78b9c78f44-qvzjv   1/1     Running   0          4m14s
  client-depl-8947c4cdb-74dl8        1/1     Running   0          4m14s

kubectl get svc
  NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE
  auth-mongo-srv   ClusterIP   10.106.187.33   <none>        27017/TCP   8d
  auth-srv         ClusterIP   10.100.67.200   <none>        3000/TCP    8d
  client-srv       ClusterIP   10.106.68.83    <none>        3000/TCP    4m35s
  kubernetes       ClusterIP   10.96.0.1       <none>        443/TCP     22d

11-215. Note on File Change Detection
// next.config.js (new) ## Solve the change detection issue of next

11-216. Adding Global CSS for Next
github.com/vercel/next.js/blob/canary/errors/css-global.md

cd ticketing\client
npm i bootstrap

// _app.js (new)

11-217. Adding a Sign Up Form
// auth\signup.js (new)

### Browser
http://ticketing.com/auth/signup

11-218. Handling Email and Password Inputs
// auth\signup.js (update)

### Browser => Developer Tools => Console
http://ticketing.com/auth/signup

11-219. Successful Account Signup & 220. Handling Validation Errors
npm i axios

...
import axios from 'axios';

export default () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState([]);

  const onSubmit = async (event) => {
    event.preventDefault();

    try {
      const response = await axios.post('/api/users/signup', {
        email,
        password,
      });
      console.log(response.data);
    } catch (err) {
      setErrors(err.response.data.errors);
    }
  };
...

      className="form-control"
    />
  </div>  
  <br/> ***
  {errors.length > 0 && (
    <div className="alert alert-danger">
      <h4>Errors:</h4>
      <ul className="my-0">
        {errors.map(err => (
          <li key={err.message}>{err.message}</li>
        ))}
      </ul>
      <br/>    
    </div>
  )} ***
  <button className="btn btn-primary">Sign Up</button>

### Browser
https://ticketing.com/auth/signup

// Developer Tools => Network => singup (201) => Response Headers (set-cookie)
   session=eyJqd3QiOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKcFpDSTZJall5WW1RMVpHSmlOekZqTVRJellqWTRaRFZpTlRaa09TSXNJbVZ0WVdsc0lqb2lkR1Z6ZERkQWRHVnpkQzVqYjIwaUxDSnBZWFFpT2pFMk5UWTFOemMwTmpkOS50cWdhVUZoZU42VjU1NzdyLXpjRk1VR2dKdXNnM1BmZFFUM3lpR1RmN2RrIn0=; path=/; secure; httponly
