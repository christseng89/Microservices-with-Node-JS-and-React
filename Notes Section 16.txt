16-331. Publishing Ticket Creation
// tickets\events\publishers\ticket-created-publisher.ts (new)

16-332. More on Publishing ~ 337. Accessing the NATS Client
// 332. More on Publishing
// new.ts
    await ticket.save();
    await new TicketCreatedPublisher(client) 
      .publish({
        id: ticket.id,
        title: ticket.title,
        price: ticket.price,
        userId: ticket.userId,
      });
    res.status(201).send(ticket);

// 334. Remember Mongoose? & 336. Singleton Implementation
// nats-wrapper.ts (new)

// index.ts
import { natsWrapper } from './nats-wrapper';
...
  try {
    await natsWrapper.connect('ticketing', 'tickets-service', 'http://nats-srv:4222'); ***
    await mongoose.connect(process.env.MONGO_URI, {});
...

// 337. Accessing the NATS Client
// new.ts
    await ticket.save();
    await new TicketCreatedPublisher(natsWrapper.client)
      .publish({
        id: ticket.id,
        title: ticket.title,
        price: ticket.price,
        userId: ticket.userId,
      });
    res.status(201).send(ticket);

skaffold dev
  ...
  [auth] Connected to MongoDb
  [auth] Listening on port 3000!!!!!!!!
  [tickets] Connected to NATS
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!

16-338. Graceful Shutdown
// index.ts
  try {
    await natsWrapper.connect('ticketing', 'tickets-service', 'http://nats-srv:4222');
    // Graceful Shutdown
    const stan = natsWrapper.client; ***
    stan.on('close', () => {
      console.log('NATS connection closed');
      process.exit();
    });
    process.on('SIGINT', () => stan.close());
    process.on('SIGTERM', () => stan.close());
  ...

### Testing
kubectl get po | grep nats
  nats-depl-7b47565c77-l5qq9            1/1     Running   0          40m

kubectl delete po nats-depl-7b47565c77-l5qq9

// skaffold
  [tickets] Listening on port 3000!!!!!!!!
  [tickets] NATS connection closed ***
  [tickets] 
  [tickets] > tickets@1.0.0 start
  [tickets] > ts-node-dev src/index.ts
  [tickets]
  [tickets] [INFO] 05:40:16 ts-node-dev ver. 2.0.0 (using ts-node ver. 10.8.2, typescript ver. 4.7.4)
  [tickets] Connected to NATS ***
  [tickets] Connected to MongoDb
  [tickets] Listening on port 3000!!!!!!!!

kubectl get po            
  NAME                                  READY   STATUS    RESTARTS***   AGE
  auth-depl-6f8b676f94-9nrx7            1/1     Running   0             42m
  auth-mongo-depl-ccbcc6d6c-krdbn       1/1     Running   0             42m
  client-depl-6cbfb5c69d-zsrzd          1/1     Running   0             42m
  nats-depl-7b47565c77-ltncx            1/1     Running   0             59s
  tickets-depl-65dc987b8c-bfhgl         1/1     Running   1 (52s ago)   5m36s ***
  tickets-mongo-depl-759f5bf4ff-vmsms   1/1     Running   0             42m

16-339. Successful Publish & Listen!
### Postman
  = Signup
  = New Ticket

// skaffold 
  ...
  [tickets] Event published to subject ticket:created, with data {
  [tickets]   id: '62cd16158de9879f610d90cc',
  [tickets]   title: 'Ticket title #1',
  [tickets]   price: 10,
  [tickets]   userId: '62cd160d73abc7c7687b52e7'
  [tickets] }

kubectl port-forward nats-depl-7b47565c77-ltncx 4222:4222

cd ticketing\nats-test
npm run listen
  Listener connected to NATS
  Message #1 received from subject ticket:created/payments-service, with data {
    id: '62cd16158de9879f610d90cc',
    title: 'Ticket title #1',
    price: 10,
    userId: '62cd160d73abc7c7687b52e7'        
  }

16-340. Ticket Update Publishing
// ticket-updated-publisher.ts (new)

// update.ts
...
import { natsWrapper } from '../nats-wrapper';
import { TicketUpdatedPublisher } from '../events/publishers/ticket-updated-publisher';
...
    await ticket.save();
    await new TicketUpdatedPublisher(natsWrapper.client) ***
      .publish({
        id: ticket.id,
        title: ticket.title,
        price: ticket.price,
        userId: ticket.userId,
      });
        
    res.status(200).send(ticket);

// skaffold
  ...
  [tickets] Event published to subject ticket:updated, with data {
  [tickets]   id: '62cd16158de9879f610d90cc',
  [tickets]   title: 'Ticket Title Update',
  [tickets]   price: 100,
  [tickets]   userId: '62cd160d73abc7c7687b52e7'
  [tickets] }

### Postman
  = Update Ticket

// no test listener for TicketUpdated ...

16-342. Handling Publish Failures
// NOTES: not included in this lecture, solving this issue by yourself.

16-343. Fixing a Few Tests
cd ticketing\tickets
npm run test
  console.error
    Error: Cannot access NATS client before connecting

16-344. Redirecting Imports
// __mocks__\nats-wrapper.ts (new) 

*** refer to common\src\events\base-publish.ts
this.client.publish(this.subject, JSON.stringify(data), (err) => {
  if (err) {
    return reject(err);
  }
...

// test\setup.ts 
jest.mock('../nats-wrapper'); ***

16-347. Ensuring Mock Invocations
// package.json
  "scripts": {
    "start": "ts-node-dev src/index.ts",
    "test": "jest --runInBand --detectOpenHandles --watchAll --no-cache" ***
  },

// test\setup.ts
beforeAll(async () => {
  jest.setTimeout(200000); ***
  process.env.JWT_KEY = 'abcdef';
...
// Cleanup database before each test
beforeEach(async () => {
  jest.clearAllMocks(); ***
  const collections = await mongoose.connection.db.collections();

// __mocks__\nats-wrapper.ts
  client: {
    publish: jest
      .fn()
      .mockImplementation(
        (_subject: string, _data: string, callback: () => void) => {
          callback();
        }
      ),
  }, 

// new.test.ts
import { natsWrapper } from '../../nats-wrapper';
...
  it('publishes an event', async () => {
    const title = 'Ticket Title - New';
  
    await request(app)
      .post('/api/tickets')
      .set('Cookie', global.fakeSignup())
      .send({
        title,
        price: 20,
      })
      .expect(201);
  
    expect(natsWrapper.client.publish).toHaveBeenCalled();
  });

// update.test.ts
import { natsWrapper } from '../../nats-wrapper';
...
import { natsWrapper } from '../../nats-wrapper';

it('returns a 404 if the provided id does not exist', async () => {
  const id = new mongoose.Types.ObjectId().toHexString();
  await request(app)
    .put(`/api/tickets/${id}`)
    .set('Cookie', global.fakeSignup())
    .send({
      title: 'aslkdfj',
      price: 20,
    })
    .expect(404);
});

it('returns a 401 if the user is not authenticated', async () => {
  const id = new mongoose.Types.ObjectId().toHexString();
  await request(app)
    .put(`/api/tickets/${id}`)
    .send({
      title: 'aslkdfj',
      price: 20,
    })
    .expect(401);
});

it('returns a 401 if the user does not own the ticket', async () => {
  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', global.fakeSignup())
    .send({
      title: 'Ticket Title',
      price: 20,
    })
    .expect(201);

  await request(app)
    .put(`/api/tickets/${response.body.id}`)
    .set('Cookie', global.fakeSignup())
    .send({
      title: 'Ticket Title Update',
      price: 1000,
    })
    .expect(401);
});

it('returns a 400 if the user provides an invalid title or price', async () => {
  const cookie = global.fakeSignup();
  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', cookie)
    .send({
      title: 'Ticket Title',
      price: 20,
    })
    .expect(201);

  await request(app)
    .put(`/api/tickets/${response.body.id}`)
    .set('Cookie', cookie)
    .send({
      title: '',
      price: 20,
    })
    .expect(400);

  await request(app)
    .put(`/api/tickets/${response.body.id}`)
    .set('Cookie', cookie)
    .send({
      title: 'Ticket Title',
      price: -10,
    })
    .expect(400);
});

it('updates the ticket provided valid inputs', async () => {
  const cookie = global.fakeSignup();
  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', cookie)
    .send({
      title: 'Ticket Title',
      price: 20,
    })
    .expect(201);

  const updateTitle = "Ticket Title Update";  
  await request(app)
    .put(`/api/tickets/${response.body.id}`)
    .set('Cookie', cookie)
    .send({
      title: updateTitle,
      price: 100,
    })
    .expect(200);

  const ticketResponse = await request(app)
    .get(`/api/tickets/${response.body.id}`)
    .send()
    .expect(200);

  expect(ticketResponse.body.title).toEqual(updateTitle);
  expect(ticketResponse.body.price).toEqual(100);
});

it('publishes an event', async () => {
  const cookie = global.fakeSignup();

  const response = await request(app)
    .post('/api/tickets')
    .set('Cookie', cookie)
    .send({
      title: 'Ticket Title - Publish',
      price: 20,
    });

  await request(app)
    .put(`/api/tickets/${response.body.id}`)
    .set('Cookie', cookie)
    .send({
      title: 'Ticket Title Updated - Publish',
      price: 100,
    })
    .expect(200);

  expect(natsWrapper.client.publish).toHaveBeenCalled();
});
