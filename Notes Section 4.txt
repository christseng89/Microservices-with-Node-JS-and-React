04-65. A Kubernetes Tour
kubectl version --short
  Client Version: v1.24.0
  Kustomize Version: v4.5.4
  Server Version: v1.23.3

04-68. Creating a Pod
kubectl apply -f posts.yaml
    pod/posts created
kubectl get po
  NAME    READY   STATUS    RESTARTS   AGE
  posts   1/1     Running   0          8s

04-74. Creating a Deployment
kubectl delete pod posts
kubectl apply -f posts-depl.yaml
kubectl get po
  NAME                         READY   STATUS    RESTARTS   AGE
  posts-depl-fd4d84f79-6v258   1/1     Running   0          9s
  posts-depl-fd4d84f79-l7ndl   1/1     Running   0          9s

kubectl get deploy
  NAME         READY   UP-TO-DATE   AVAILABLE   AGE
  posts-depl   2/2     2            2           15s

kubectl describe deploy posts-depl
  Name:                   posts-depl
  Namespace:              default
  CreationTimestamp:      Thu, 09 Jun 2022 18:22:39 +0800
  Labels:                 <none>
  Annotations:            deployment.kubernetes.io/revision: 1
  Selector:               app=posts
  ...

kubectl delete -f posts-depl.yaml
kubectl apply -f posts-depl.yaml

04-79. Creating a NodePort Service
kubectl apply -f posts-srv.yaml
kubectl get svc 
  NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
  kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP          2d11h
  posts-srv    NodePort    10.106.205.88   <none>        4000:32116/TCP   22s

kubectl describe svc posts
  Name:                     posts-srv
  Namespace:                default
  Labels:                   <none>
  Annotations:              <none>
  Selector:                 app=posts
  Type:                     NodePort
  IP Family Policy:         SingleStack
  IP Families:              IPv4
  IP:                       10.106.205.88
  IPs:                      10.106.205.88
  Port:                     posts  4000/TCP
  TargetPort:               4000/TCP
  NodePort:                 posts  32116/TCP // External port
  Endpoints:                <none>
  Session Affinity:         None
  External Traffic Policy:  Cluster
  Events:                   <none>

minikube ip
  192.168.59.100

http://192.168.59.100:32116/posts
  {}

04-82. Building a Deployment for the Event Bus
kubectl apply -f event-bus-depl.yaml
  deployment.apps/event-bus-depl unchanged
  service/event-bus-srv created

kubectl apply -f posts-depl.yaml 
  deployment.apps/posts-depl unchanged
  service/posts-clusterip-srv created

kubectl get po
  NAME                             READY   STATUS    RESTARTS   AGE
  event-bus-depl-dd87dfc6c-ggkdl   1/1     Running   0          13s ***
  event-bus-depl-dd87dfc6c-m2pbt   1/1     Running   0          13s ***
  posts-depl-fd4d84f79-kp7dl       1/1     Running   0          3h39m
  posts-depl-fd4d84f79-vtd2m       1/1     Running   0          3h39m

kubectl get svc
  NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
  event-bus-srv         ClusterIP   10.98.255.181   <none>        4005/TCP         5m54s***
  kubernetes            ClusterIP   10.96.0.1       <none>        443/TCP          2d16h
  posts-clusterip-srv   ClusterIP   10.96.244.194   <none>        4000/TCP         25s***
  posts-srv             NodePort    10.96.241.54    <none>        4000:32116/TCP   3h52m

kubectl logs posts-depl-fd4d84f79-kp7dl        
  > posts@1.0.0 start
  > nodemon index.js

  [nodemon] 2.0.16
  [nodemon] to restart at any time, enter `rs`
  [nodemon] watching path(s): *.*
  [nodemon] watching extensions: js,mjs,json
  [nodemon] starting `node index.js`
  Listening on 4000

04-84. How to Communicate Between Services (Wind it up)
### External 32116 <=> posts-clusterip-srv:4000 <=> event-bus-srv:4005

// Posts, Comments, Query, Moderation, Event-Bus
.env
npm i dotenv

// Dockerfile (Posts, Comments, Event-Bus, Query, Moderation)
ARG DOCKER_ENV
ENV NODE_ENV=${DOCKER_ENV}
CMD ["npm", "start"]

// index.js (Posts, Comments, Query, Moderation)
let ebCIPHost =  'localhost';
if(process.env.NODE_ENV === 'production') {
  require('dotenv').config();
  ebCIPHost =process.env.ebCIPHost 
}
console.log(ebCIPHost);
...
await axios.post(`http://${ebCIPHost}:4005/events`, {
  ...

// index.js (Event-Bus)
...
let postsCIPHost = 'localhost';
let commentsCIPHost = 'localhost';
let queryCIPHost = 'localhost';
let moderationCIPHost = 'localhost';

if(process.env.NODE_ENV === 'production') {
  require('dotenv').config();
  postsCIPHost = process.env.postsCIPHost;
  commentsCIPHost = process.env.commentsCIPHost;
  queryCIPHost = process.env.queryCIPHost;
  moderationCIPHost = process.env.moderationCIPHost;
}
console.log(postsCIPHost, commentsCIPHost, queryCIPHost, moderationCIPHost);

...

  // Posts service
  axios.post(`http://${postsCIPHost}:4000/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Comments service
  axios.post(`http://${commentsCIPHost}:4001/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Query service
  axios.post(`http://${queryCIPHost}:4002/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Moderate service
  axios.post(`http://${moderationCIPHost}:4003/events`, event).catch((err) => {
    console.log(err.message);
  });
  res.send({ status: "OK" });
});

// Test production
ARG DOCKER_ENV
ENV NODE_ENV=${DOCKER_ENV}
npm start 

// Test development
set NODE_ENV=
npm start 

### Repeat images building && kubectl apply
minikube ssh
cd Microservices-with-Node-JS-and-React/
git pull
// Re-Build all Docker Images

cd blog/backends/posts
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/posts .

cd ..
cd comments
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/comments .

cd ..
cd query
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/query .

cd ..
cd moderation
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/moderation .

cd ..
cd event-bus
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/event-bus .

minikube image push christseng89/posts
minikube image push christseng89/comments
minikube image push christseng89/query
minikube image push christseng89/moderation
minikube image push christseng89/event-bus

kubectl delete -f .
kubectl apply -f .

kubectl rollout restart deploy posts-depl     
kubectl rollout restart deploy event-bus-depl  

04-87. Adding Query, Moderation and Comments
// Bugfixing 'socket hang up' (Event-bus, index.js)
app.post("/events", async (req, res) => {
  const event = req.body;
  events.push(event);

  // Posts service
  await axios.post(`http://${postsCIPHost}:4000/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Comments service
  await axios.post(`http://${commentsCIPHost}:4001/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Query service
  await axios.post(`http://${queryCIPHost}:4002/events`, event).catch((err) => {
    console.log(err.message);
  });
  // Moderate service
  await axios.post(`http://${moderationCIPHost}:4003/events`, event).catch((err) => {
    console.log(err.message);
  });
  res.send({ status: "OK" });
});

// Comments index.js
  await axios.post(`http://${ebCIPHost}:4005/events`, {
    type: 'CommentCreated',

*** React Client to k8s
04-92. Installing Ingress-Nginx 
### Not Kubernetes-Ingress ...
https://kubernetes.github.io/ingress-nginx/deploy/
minikube addons enable ingress
kubectl get all -n ingress-nginx
  NAME                                           READY   STATUS      RESTARTS   AGE
  pod/ingress-nginx-admission-create-tzlmt       0/1     Completed   0          10m
  pod/ingress-nginx-admission-patch-5thkq        0/1     Completed   1          10m
  pod/ingress-nginx-controller-cc8496874-pnch5   1/1     Running     0          10m

  NAME                                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
  service/ingress-nginx-controller             NodePort    10.111.188.46   <none>        80:30448/TCP,443:30908/TCP   10m
  service/ingress-nginx-controller-admission   ClusterIP   10.109.55.251   <none>        443/TCP                      10m

  NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
  deployment.apps/ingress-nginx-controller   1/1     1            1           10m

  NAME                                                 DESIRED   CURRENT   READY   AGE
  replicaset.apps/ingress-nginx-controller-cc8496874   1         1         1       10m

  NAME                                       COMPLETIONS   DURATION   AGE
  job.batch/ingress-nginx-admission-create   1/1           8s         10m
  job.batch/ingress-nginx-admission-patch    1/1           10s        10m

04-94. Writing Ingress Config Files (v1)
kubectl apply -f ingress-srv.yaml
  ingress.networking.k8s.io/ingress-srv created

kubectl get ingress              NAME          CLASS    HOSTS       ADDRESS          PORTS   AGE
  ingress-srv   <none>   posts.com   192.168.59.100   80      78s

04-96. Hosts File Tweak
minikube ip
  192.168.59.100
notepad c:\Windows\System32\Drivers\etc\hosts
  192.168.59.100 posts.com

ping posts.com
  Pinging posts.com [192.168.59.100] with 32 bytes of data:
  Reply from 192.168.59.100: bytes=32 time<1ms TTL=64
  Reply from 192.168.59.100: bytes=32 time<1ms TTL=64  
  ...

http://posts.com/posts
  {
    a7c9e70c: {
    id: "a7c9e70c",
    title: "Title Postman #1"
    }
  }

04-97. Important Note to Add Environment Variable
https://create-react-app.dev/docs/adding-custom-environment-variables/

// Client-async
set REACT_APP_HOST=k8s 

// console.log('Host: ', process.env.REACT_APP_HOST);

// Dockerfile (client-async)
  # Add the following lines
  ENV CI=true
  ENV WDS_SOCKET_PORT=0

  WORKDIR /app
  ...
  ARG DOCKER_ENV
  ENV REACT_APP_HOST=${DOCKER_ENV}
  CMD ["npm", "start"]

// Revise js (PostCreate.js, CommentCreate.js, PostList.js)

let server_url = 'localhost:4000';
if (process.env.REACT_APP_HOST === 'k8s') {
  server_url = 'posts.com';
}
console.log('Server Url: ', server_url);

04-98. Deploying the React App
cd Microservices-with-Node-JS-and-React/
git pull
cd blog/client-async
minikube image build --build-env=[DOCKER_ENV=k8s] -t christseng89/client-async .
minikube image push christseng89/client-async

kubectl apply -f .

04-99. Unique Route Paths
// PostCreate.js 
let server_url = 'localhost:4000/posts'; ***
if (process.env.REACT_APP_HOST === 'k8s') {
  server_url = 'posts.com/posts/create'; ***
}
console.log('Server Url: ', server_url);

const PostCreate = () => {
  const [title, setTitle] = useState("");
  const onSubmit = async (event) => {
    event.preventDefault();
    await axios.post(`http://${{server_url}}`, { ***
      title,
    });
...

// backends/posts index.js
let ebCIPHost =  'localhost';
let urlPath = '/posts'; ***
if(process.env.NODE_ENV === 'production') {
  require('dotenv').config();
  ebCIPHost = process.env.ebCIPHost; 
  urlPath = '/posts/create'; ***
}
...

app.get(urlPath, (req, res) => { ***
  res.send(posts);
});

app.post(urlPath, async (req, res) => { ***
  const id = randomBytes(4).toString('hex');
  const { title } = req.body;
...

cd Microservices-with-Node-JS-and-React/
git pull

cd blog/client-async
minikube image build --build-env=[DOCKER_ENV=k8s] -t christseng89/client-async .
minikube image push christseng89/client-async

cd .. 
cd backends/posts
minikube image build --build-env=[DOCKER_ENV=production] -t christseng89/posts .
minikube image push christseng89/posts

kubectl rollout restart deploy posts-depl
kubectl rollout restart deploy client-depl
kubectl get po -w | grep client
  client-depl-745444578c-frqhc      0/1     Terminating   0          49s
  client-depl-84b4bcff5-cgmr7       1/1     Running       0          9s
  client-depl-745444578c-frqhc      0/1     Terminating   0          49s
  client-depl-745444578c-frqhc      0/1     Terminating   0          49s

04-100. Final Route Config
// ingress-srv.yaml
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
  ...
        paths:
          - path: /posts/create ***
            pathType: Prefix
            backend:
              service:
                name: posts-clusterip-srv
                port:
                  number: 4000
          - path: /posts ***
            pathType: Prefix
            backend:
              service:
                name: query-clusterip-srv
                port:
                  number: 4002
          - path: /posts/?(.*)/comments
            pathType: Prefix
            backend:
              service:
                name: comments-clusterip-srv
                port:
                  number: 4001
          - path: /comments
            pathType: Prefix
            ...

kubectl apply -f ingress-srv.yaml
  ingress.networking.k8s.io/ingress-srv configured

### Bugfixing (client-async, due to axios limitations)
// PostCreate.js
let server_url = 'http://localhost:4000/posts'; ***
if (process.env.REACT_APP_HOST === 'k8s') {
  server_url = 'http://posts.com/posts/create'; ***
}
console.log('Server Url: ', server_url);

const PostCreate = () => {
  const [title, setTitle] = useState("");
  const onSubmit = async (event) => {
    event.preventDefault();
    await axios.post(server_url, { ***
      title,

// PostList.js
let server_url = 'http://localhost:4002/posts'; ***
if (process.env.REACT_APP_HOST === 'k8s') {
  server_url = 'http://posts.com/posts'; ***
}
console.log('Server Url: ', server_url);

const PostList = () => {
  const [posts, setPosts] = useState({});

  const fetchPosts = async () => {
    const res = await axios.get(server_url); ***
    console.log('Query Service:', res.data);

// CommentCreate.js
let server_url = 'http://localhost:4001/posts'; ***
if (process.env.REACT_APP_HOST === 'k8s') {
  server_url = 'http://posts.com/posts'; ***
}

const CommentCreate = ({ postId }) => {
  const [content, setContent] = useState("");
  const onSubmit = async (event) => {
    event.preventDefault();

    await axios.post(server_url + '/' + postId + '/comments', {***
      content,

// Dockerfile
COPY ./ ./
COPY ./public ./public ***

cd Microservices-with-Node-JS-and-React/
git pull

cd blog/client-async
minikube image build --build-env=[DOCKER_ENV=k8s] -t christseng89/client-async .
minikube image push christseng89/client-async

kubectl delete -f .
kubectl apply -f .

// Broswer Testing
http://posts.com/posts
http://posts.com/comments
http://posts.com

### Additional Docker Compose sample
https://www.section.io/engineering-education/build-and-dockerize-a-full-stack-react-app-with-nodejs-and-nginx/

04-101. Introducing Skaffold
https://skaffold.dev/
https://skaffold.dev/docs/install/#chocolatey
choco install -y skaffold
choco install -y docker

skaffold version
  v1.38.0

04-103. First Time Skaffold Startup
// blog\scoffold.yaml (config file)
cd blog
skaffold dev

// Minikube 
https://skaffold.dev/docs/quickstart/#start-minikube
minikube start
skaffold config set --global local-cluster true
eval $(minikube docker-env)
cd /d/development/React/Microservices-with-NodeJS-and-React/blog
skaffold dev
  Listing files to watch...
  - christseng89/client-async
  - christseng89/comments
  ...
  Generating tags...
  - christseng89/client-async -> christseng89/client-async:DevelopmentMinikube-3-g66add71
  - christseng89/comments -> christseng89/comments:DevelopmentMinikube-3-g66add71
  ...
  Checking cache...
  - christseng89/client-async: Not found. Building
  - christseng89/comments: Not found. Building
  ...
  Starting build...
  Found [minikube] context, using local docker daemon.
  Building [christseng89/query]...
  Target platforms: [linux/amd64]
  failed to get console mode for stdin: The handle is invalid.
  [+] Building 25.4s (10/10) FINISHED
  => [internal] load build definition from Dockerfile                                      0.1s
  ...
  1/6 deployment(s) 'failed'

// Run again ...
skaffold dev 
  ...
  Deployments stabilized in 16.24 seconds
  Press Ctrl+C to exit
  Watching for changes...
  [client] 
  [client] > client-async@0.1.0 start
  [client] > react-scripts start
  [client] 
  [moderation] 
  [moderation] > moderation@1.0.0 start
  [moderation] > nodemon index.js
  ...

skaffold delete
